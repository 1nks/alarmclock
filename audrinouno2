#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <RTClib.h>
#include <EEPROM.h>

boolean alarmActive = false; // Variable to track if alarm is active

RTC_DS3231 rtc;

LiquidCrystal_I2C lcd(0x27, 16, 2);

const int btnChange = 5;
const int btnOK = 6;
const int btnMode = 7;
const int buzzer = 8;

int alarmHour = 12;
int alarmMinutes = 0;
boolean hourMode = 0;
boolean alarmOn = 1;
int M = 12;
int D = 31;
int Y = 2020;
int day = 7;
int h = 23;
int m = 59;

int addrH[] = {0, 1, 2, 3, 4};
int addrM[] = {5, 6, 7, 8, 9};
int addrActive[] = {10, 11, 12, 13, 14};

int mode = 1;
int submode = 1;
int slot = 0;

byte clockChar[] = {B00000, B01110, B10101, B10101, B10111, B10001, B01110, B00000};
byte alarmChar[] = {B00100, B01110, B01110, B01110, B11111, B00000, B00100, B00000};
byte dateChar[] = {B11111, B00000, B01100, B01010, B01010, B01100, B00000, B11111};
byte box[] = {B11111, B11111, B11111, B11111,B11111,B11111,B11111,
B11111};

void setup() {

  pinMode(btnChange, INPUT_PULLUP);
  pinMode(btnOK, INPUT_PULLUP);
  pinMode(btnMode, INPUT_PULLUP);
  pinMode(buzzer, OUTPUT);

  lcd.init();
  lcd.backlight();
  lcd.createChar(0, clockChar);
  lcd.createChar(1, alarmChar);
  lcd.createChar(2, dateChar);
  lcd.createChar(3, box);

  Wire.begin();
  rtc.begin();



  // Initialize DS3231 only if it's not already running
  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }

  // Check if the RTC lost power and needs to be set
  if (rtc.lostPower()) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
}

void loop() {

  // Get current time
  DateTime now = rtc.now();
  

  // Check if alarm is active and if current time matches alarm time
  if (alarmActive && now.hour() == alarmHour && now.minute() == alarmMinutes) {
    // Trigger alarm and light up LEDs
    alarm();
  }


  if (digitalRead(btnMode) == LOW) {
    mode++;
    if (mode == 4) {
      mode = 1;
    }
    submode = 0;
    lcd.clear();
    delay(200);
  }

  if (mode == 1) {
    clockDisplay();
  }

  if (mode == 2) {
    alarmMode();
  }

  if (mode == 3) {
    updateRTC();
  }
  if (mode == 0) {
    alarm();
    EEPROM.write(addrActive, 0);
  }
  for (int x = 0; x < 5; x++) {
    if (EEPROM.read(addrActive[x]) == 1) {
      if (rtc.now().hour() == EEPROM.read(addrH[x]) && rtc.now().minute() == EEPROM.read(addrM[x])) {
        EEPROM.write(addrActive[x], 0);
        mode = 0;
      }
    }
  }
}



void alarm() {
  // Get current time
  DateTime now = rtc.now();


  // Trigger alarm (buzzer and LCD)
  clockDisplay();
  lcd.noBacklight();
  digitalWrite(buzzer, HIGH);
  delay(300);
  lcd.backlight();
  digitalWrite(buzzer, LOW);
  delay(200);

  // Deactivate alarm once triggered
  alarmActive = false;
}


void clockDisplay() {
  DateTime now = rtc.now(); // Get current date and time from DS3231 RTC

  lcd.setCursor(1, 1);
  lcd.write(0); // Display clock symbol

  lcd.setCursor(1, 2); // Set cursor to the second row, first column
  switch (now.month()) { // Get month from DateTime object
    case 1: lcd.print("Jan "); break;
    case 2: lcd.print("Feb "); break;
    case 3: lcd.print("Mar "); break;
    case 4: lcd.print("Apr "); break;
    case 5: lcd.print("May "); break;
    case 6: lcd.print("Jun "); break;
    case 7: lcd.print("Jul "); break;
    case 8: lcd.print("Aug "); break;
    case 9: lcd.print("Sep "); break;
    case 10: lcd.print("Oct "); break;
    case 11: lcd.print("Nov "); break;
    case 12: lcd.print("Dec "); break;
  }

  if (now.day() < 10) { // Check if day is single digit
    lcd.print(" "); // Add a space for alignment
  }
  lcd.print(now.day()); // Display day

  lcd.print(", "); // Display comma separator
  lcd.print(now.year()); // Display year

  lcd.setCursor(15, 2); // Set cursor to the second row, 14th column
  switch (now.dayOfTheWeek()) { // Get day of the week from DateTime object
    
    case 1: lcd.print("Mon"); break;
    case 2: lcd.print("Tue"); break;
    case 3: lcd.print("Wed"); break;
    case 4: lcd.print("Thu"); break;
    case 5: lcd.print("Fri"); break;
    case 6: lcd.print("Sat"); break;
    case 7: lcd.print("Sun"); break;
  }

  lcd.setCursor(5, 1); // Set cursor to the first row, fourth column
  if ((now.hour() > 12 && now.hour() < 22) || (now.hour() > 0 && now.hour() < 10)) {
    lcd.print("0"); // Add leading zero if hour is single digit
  }
  if (now.hour() == 0) {
    lcd.print("12"); // Special case for midnight
  }
  else if (now.hour() <= 12) {
    lcd.print(now.hour()); // Display hour in 12-hour format
  }
  else {
    lcd.print(now.hour() - 12); // Convert 24-hour format to 12-hour format
  }
  lcd.print(":"); // Display colon separator
  if (now.minute() < 10) {
    lcd.print("0"); // Add leading zero if minute is single digit
  }
  lcd.print(now.minute()); // Display minute

  lcd.print(":"); // Display colon separator
  if (now.second() < 10) {
    lcd.print("0"); // Add leading zero if second is single digit
  }
  lcd.print(now.second()); // Display second

  lcd.print("   "); // Clear any remaining characters
  if (now.hour() < 12) {
    lcd.print("AM"); // Display AM for morning hours
  }
  else {
    lcd.print("PM"); // Display PM for afternoon/evening hours
  }
}


void alarmMode() {
  if (submode == 0) {
    lcd.setCursor(2, 1);
    lcd.write(1);
    lcd.setCursor(4, 1);
    lcd.print("Select:");

    if (digitalRead(btnChange) == LOW) {
      slot++;
      if (slot > 3 ) {
        slot = 0;
      }
      delay(200);
    }
    lcd.setCursor(12, 1);
    lcd.print("Slot#");
    lcd.print(slot + 1);
    lcd.setCursor(2, 2);
    if (EEPROM.read(addrH[slot]) > 23) {
      EEPROM.write(addrH[slot], 0);
    }
    if (EEPROM.read(addrM[slot]) > 59) {
      EEPROM.write(addrM[slot], 0);
    }
    if (EEPROM.read(addrActive[slot]) > 1) {
      EEPROM.write(addrActive[slot], 0);
    }
    if ((EEPROM.read(addrH[slot]) > 12 && EEPROM.read(addrH[slot]) < 22) || (EEPROM.read(addrH[slot]) > 0 && EEPROM.read(addrH[slot]) < 10)) {
      lcd.print("0");
    }
    if (EEPROM.read(addrH[slot]) == 0) {
      lcd.print("12");
      alarmHour = 12;
    }
    else if (EEPROM.read(addrH[slot]) <= 12) {
      lcd.print(EEPROM.read(addrH[slot]));
      alarmHour = EEPROM.read(addrH[slot]);
    }
    else {
      lcd.print(EEPROM.read(addrH[slot]) - 12);
      alarmHour = EEPROM.read(addrH[slot]) - 12;
    }
    lcd.print(":");
    if (EEPROM.read(addrM[slot]) < 10) {
      lcd.print("0");
    }
    lcd.print(EEPROM.read(addrM[slot]));
    alarmMinutes = EEPROM.read(addrM[slot]);
    lcd.print(" ");
    if (EEPROM.read(addrH[slot]) < 12) {
      lcd.print("AM");
      hourMode = 0;
    }
    else {
      lcd.print("PM");
      hourMode = 1;
    }
    lcd.print("   ");
    if (EEPROM.read(addrActive[slot]) == 1) {
      lcd.print("ON ");
    }
    else {
      lcd.print("OFF");
    }
  }
  else {
    lcd.setCursor(2, 1);
    lcd.write(1);
    lcd.setCursor(4, 1);
    lcd.print("Set ||");
    lcd.setCursor(2, 2);
    lcd.print("Alarm ||");
    lcd.setCursor(11, 2);
    if (alarmHour < 10) {
      lcd.print("0");
      lcd.setCursor(12, 2);
    }
    lcd.print(alarmHour);
    lcd.setCursor(13, 2);
    lcd.print(":");
    lcd.setCursor(14, 2);
    if (alarmMinutes < 10) {
      lcd.print("0");
      lcd.setCursor(15, 2);
    }
    lcd.print(alarmMinutes);
    if (hourMode == 0) {
      lcd.print("AM");
    }
    else {
      lcd.print("PM");
    }
  }
  //  lcd.print(alarmMinutes);
  if (digitalRead(btnOK) == LOW) {
    submode++;
    if (submode > 4) {
      submode = 0;
    }
    delay(200);
    lcd.clear();
  }
  if (submode == 1) {
    lcd.setCursor(11, 1);
    lcd.write(1);
    lcd.write(1);
    if (digitalRead(btnChange) == LOW) {
      alarmHour++;
      if (alarmHour > 12) {
        alarmHour = 1;
      }
      delay(500);
    }
  }
  if (submode == 2) {
    lcd.setCursor(14, 1);
    lcd.write(1);
    lcd.write(1);
    if (digitalRead(btnChange) == LOW) {
      alarmMinutes++;
      if (alarmMinutes >= 60) {
        alarmMinutes = 0;
      }
      delay(500);
    }
  }
  if (submode == 3) {
    lcd.setCursor(16, 1);
    lcd.write(1);
    lcd.write(1);
    if (digitalRead(btnChange) == LOW) {
      hourMode = !hourMode;
      delay(500);
    }
  }
  while (submode == 4) {
    lcd.setCursor(2, 1);
    lcd.print("Activate Alarm?");
    lcd.setCursor(2, 2);
    lcd.print("Slot #");
    lcd.print(slot + 1);
    lcd.print("   ");
    if(alarmOn==1){
      lcd.print("ON ");
    }
    else{
      lcd.print("OFF");
    }
    if (digitalRead(btnChange) == LOW) {
      alarmOn = !alarmOn;
      delay(200);
    }

    if (digitalRead(btnOK) == LOW && alarmOn == 1) {
      lcd.clear();
      lcd.setCursor(2, 1);
      lcd.print("SAVING ON EEPROM");
      delay(200);
      lcd.setCursor(2, 2);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      delay(100);
      lcd.write(3);
      if (hourMode == 1 && alarmHour != 12) {
        EEPROM.write(addrH[slot], alarmHour + 12);
      }
      else if (hourMode == 0 && alarmHour == 12) {
        EEPROM.write(addrH[slot], 0);
      }
      else {
        EEPROM.write(addrH[slot], alarmHour);
      }

      EEPROM.write(addrM[slot], alarmMinutes);
      EEPROM.write(addrActive[slot], 1);
      submode = 0;
      mode = 1;
      lcd.clear();
    }
    if (digitalRead(btnOK) == LOW && alarmOn == 0)  {
      lcd.clear();
      lcd.setCursor(2, 1);
      lcd.print("Alarm Slot#");
      lcd.print(slot + 1);
      lcd.setCursor(2, 2);
      lcd.print(" OFF      ");
      
      EEPROM.write(addrActive[slot], 0);
      submode = 0;
      mode = 1;
      
      delay(2000);
      lcd.clear();
    }
  }
}

void updateRTC() {
  lcd.setCursor(2, 1);
  lcd.write(2);
  if (digitalRead(btnOK) == LOW) {
    submode++;
    if (submode > 7) {
      submode = 0;
    }
    delay(200);
    lcd.clear();
  }

  if (submode == 0) {
    lcd.setCursor(4, 1);
    lcd.print(" Set Date/Time?");
    lcd.setCursor(2, 2);
    lcd.print("Press OK button");
  }
  if (submode == 1) {
    lcd.setCursor(4, 1);
    lcd.print("Set Month");
    lcd.setCursor(2, 2);
    lcd.print("--> ");
    if (digitalRead(btnChange) == LOW) {
      M++;
      if (M == 13) {
        M = 1;
      }
      delay(200);
    }
    switch (M) {
      case 1: lcd.print("January     ");
        break;
      case 2: lcd.print("February    ");
        break;
      case 3: lcd.print("March       ");
        break;
      case 4: lcd.print("April       ");
        break;
      case 5: lcd.print("May         ");
        break;
      case 6: lcd.print("June        ");
        break;
      case 7: lcd.print("July        ");
        break;
      case 8: lcd.print("August      ");
        break;
      case 9: lcd.print("September   ");
        break;
      case 10: lcd.print("October     ");
        break;
      case 11: lcd.print("November    ");
        break;
      case 12: lcd.print("December    ");
        break;
    }
  }
  if (submode == 2) {
    lcd.setCursor(4, 1);
    lcd.print("Set Day");
    lcd.setCursor(2, 2);
    lcd.print("--> ");
    if (digitalRead(btnChange) == LOW) {
      D++;
      if (D == 32) {
        D = 1;
      }
      delay(200);
    }
    lcd.print(D);
    lcd.print(" ");
  }

  if (submode == 3) {
    lcd.setCursor(4, 1);
    lcd.print("Set Year");
    lcd.setCursor(2, 2);
    lcd.print("--> ");
    if (digitalRead(btnChange) == LOW) {
      Y++;
      if (Y == 2099) {
        Y = 2000;
      }
      delay(200);
    }
    lcd.print(Y);
  }
 if (submode == 4) {
    lcd.setCursor(4, 1);
    lcd.print("Set Day");
    lcd.setCursor(2, 2);
    lcd.print("--> ");
    if (digitalRead(btnChange) == LOW) {
      day++;
      if (day == 8) {
        day = 1;
      }
      delay(200);
    }
    switch (day) {
      case 1: lcd.print("Monday      "); 
      break;
      case 2: lcd.print("Tuesday     "); 
      break;
      case 3: lcd.print("Wednesday   "); 
      break;
      case 4: lcd.print("Thursday    "); 
      break;
      case 5: lcd.print("Friday      "); 
      break;
      case 6: lcd.print("Saturday    "); 
      break;
      case 7: lcd.print("Sunday      "); 
      break;
    }
}
  if (submode == 5) {
    lcd.setCursor(4, 1);
    lcd.print("Set Hour");
    lcd.setCursor(2, 2);
    lcd.print("--> ");
    if (digitalRead(btnChange) == LOW) {
      h++;
      if (h == 24) {
        h = 0;
      }
      delay(200);
    }
    if (h > 12) {
      lcd.print(h - 12);
      lcd.print(" ");
    }
    else if (h == 0) {
      lcd.print("12");
      lcd.print(" ");
    }
    else {
      lcd.print(h);
      lcd.print(" ");

    }
    if (h >= 12) {
      lcd.setCursor(11, 2);
      lcd.print("PM");
    }
    else {
      lcd.setCursor(11, 2);
      lcd.print("AM");
    }

  }
  if (submode == 6) {
    lcd.setCursor(4, 1);
    lcd.print("Set Minutes");
    lcd.setCursor(2, 2);
    lcd.print("--> ");
    if (digitalRead(btnChange) == LOW) {
      m++;
      if (m == 60) {
        m = 0;
      }
      delay(200);
    }
    lcd.print(m);
    lcd.print(" ");
  }
  if (submode == 7) {
    lcd.setCursor(2, 1);
    lcd.print("OVERWRITE EEPROM");
    delay(200);
    lcd.setCursor(2, 2);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    delay(100);
    lcd.write(3);
    rtc.adjust(DateTime(Y, M, D, h, m, 0)); // Adjust RTC with the new date and time
    delay(200);
    lcd.clear();
    mode = 1;
  }
}

